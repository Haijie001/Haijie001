{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u6591\\u9A6C\\\\\\u524D\\u7AEFts\\\\\\u7535\\u5546\\u7F51\\u7AD9\\\\ecommerce-webapp\\\\src\\\\context\\\\cart.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\"; // 导入 React 的 createContext, useContext, useState 钩子\n// 定义一个初始状态对象，包含购物车(cart)以及操作购物车的函数，这些函数初始时是空操作\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  cart: [],\n  // 购物车数组，存储所有商品项\n  cartItemCount: () => 0,\n  // 计算购物车内商品数量的函数，初始为返回0\n  addToCart: () => null,\n  // 添加商品到购物车的函数，初始为不执行任何操作\n  removeFromCart: () => null,\n  // 从购物车中移除商品的函数\n  increaseQuantity: () => null,\n  // 增加商品数量的函数\n  decreaseQuantity: () => null // 减少商品数量的函数\n\n}; // 使用 React 的 createContext 创建一个购物车上下文，用于在应用中共享购物车状态\n\nconst CartContext = /*#__PURE__*/createContext(initialState); // useCart 是一个自定义 Hook，返回购物车上下文中的值，方便其他组件访问购物车相关数据\n\nconst useCart = () => {\n  _s();\n\n  return useContext(CartContext);\n}; // CartProvider 是一个组件，负责为子组件提供购物车状态和操作函数\n\n\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst CartProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  // 使用 useState 钩子来定义 cart 状态，并将初始状态设置为 initialState.cart\n  const [cart, setCart] = useState(initialState.cart); // 计算购物车中所有商品的总数量，通过累加每个商品的 quantity 来实现\n\n  const cartItemCount = () => {\n    return cart.reduce((acc, item) => acc + item.quantity, 0); // reduce 累加购物车中所有商品的数量\n  }; // addToCart 函数用于将新商品添加到购物车\n\n\n  const addToCart = product => {\n    const productIdx = cart.findIndex(item => item.product.id === product.id); // 查找购物车中是否已存在该商品\n\n    if (productIdx !== -1) {\n      increaseQuantity(product.id); // 如果商品已存在，调用 increaseQuantity 增加其数量\n    } else {\n      setCart([...cart, {\n        product,\n        quantity: 1\n      }]); // 如果商品不存在，向购物车中添加该商品，数量设为1\n    }\n  }; // removeFromCart 函数用于从购物车中移除商品\n\n\n  const removeFromCart = productId => {\n    setCart(cart.filter(item => item.product.id !== productId)); // 过滤掉与指定 productId 匹配的商品\n  }; // increaseQuantity 函数用于增加指定商品的数量\n\n\n  const increaseQuantity = productId => {\n    const copy = cart.slice(); // 创建购物车的副本\n\n    const productIdx = copy.findIndex(item => item.product.id === productId); // 查找该商品在购物车中的索引\n\n    if (productIdx !== -1) {\n      copy[productIdx].quantity += 1; // 增加商品数量\n\n      setCart(copy); // 更新购物车状态\n    }\n  }; // decreaseQuantity 函数用于减少指定商品的数量，数量不能小于1\n\n\n  const decreaseQuantity = productId => {\n    const copy = cart.slice(); // 创建购物车的副本\n\n    const productIdx = copy.findIndex(item => item.product.id === productId); // 查找该商品在购物车中的索引\n\n    if (productIdx !== -1 && copy[productIdx].quantity > 1) {\n      copy[productIdx].quantity -= 1; // 减少商品数量，但不能低于1\n\n      setCart(copy); // 更新购物车状态\n    }\n  }; // 返回一个 CartContext.Provider 组件，传递购物车状态和操作函数给子组件\n\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      cartItemCount,\n      addToCart,\n      removeFromCart,\n      increaseQuantity,\n      decreaseQuantity\n    } // 提供上下文中的数据和操作\n    ,\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(CartProvider, \"1ZjdJxrwuza0MR3gyCfx5CvZFQw=\");\n\n_c = CartProvider;\nexport { useCart, CartProvider }; // 导出 useCart 自定义 Hook 和 CartProvider 组件\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","initialState","cart","cartItemCount","addToCart","removeFromCart","increaseQuantity","decreaseQuantity","CartContext","useCart","CartProvider","children","setCart","reduce","acc","item","quantity","product","productIdx","findIndex","id","productId","filter","copy","slice"],"sources":["D:/斑马/前端ts/电商网站/ecommerce-webapp/src/context/cart.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\" // 导入 React 的 createContext, useContext, useState 钩子\n\n// 定义一个初始状态对象，包含购物车(cart)以及操作购物车的函数，这些函数初始时是空操作\nconst initialState = {\n    cart: [], // 购物车数组，存储所有商品项\n    cartItemCount: () => 0, // 计算购物车内商品数量的函数，初始为返回0\n    addToCart: () => null, // 添加商品到购物车的函数，初始为不执行任何操作\n    removeFromCart: () => null, // 从购物车中移除商品的函数\n    increaseQuantity: () => null, // 增加商品数量的函数\n    decreaseQuantity: () => null, // 减少商品数量的函数\n}\n\n// 使用 React 的 createContext 创建一个购物车上下文，用于在应用中共享购物车状态\nconst CartContext = createContext(initialState)\n\n// useCart 是一个自定义 Hook，返回购物车上下文中的值，方便其他组件访问购物车相关数据\nconst useCart = () => useContext(CartContext)\n\n// CartProvider 是一个组件，负责为子组件提供购物车状态和操作函数\nconst CartProvider = ({ children }) => {\n    // 使用 useState 钩子来定义 cart 状态，并将初始状态设置为 initialState.cart\n    const [cart, setCart] = useState(initialState.cart)\n\n    // 计算购物车中所有商品的总数量，通过累加每个商品的 quantity 来实现\n    const cartItemCount = () => {\n        return cart.reduce((acc, item) => acc + item.quantity, 0) // reduce 累加购物车中所有商品的数量\n    }\n\n    // addToCart 函数用于将新商品添加到购物车\n    const addToCart = (product) => {\n        const productIdx = cart.findIndex((item) => item.product.id === product.id) // 查找购物车中是否已存在该商品\n        if (productIdx !== -1) {\n            increaseQuantity(product.id) // 如果商品已存在，调用 increaseQuantity 增加其数量\n        } else {\n            setCart([...cart, { product, quantity: 1 }]) // 如果商品不存在，向购物车中添加该商品，数量设为1\n        }\n    }\n\n    // removeFromCart 函数用于从购物车中移除商品\n    const removeFromCart = (productId) => {\n        setCart(cart.filter((item) => item.product.id !== productId)) // 过滤掉与指定 productId 匹配的商品\n    }\n\n    // increaseQuantity 函数用于增加指定商品的数量\n    const increaseQuantity = (productId) => {\n        const copy = cart.slice() // 创建购物车的副本\n        const productIdx = copy.findIndex((item) => item.product.id === productId) // 查找该商品在购物车中的索引\n        if (productIdx !== -1) {\n            copy[productIdx].quantity += 1 // 增加商品数量\n            setCart(copy) // 更新购物车状态\n        }\n    }\n\n    // decreaseQuantity 函数用于减少指定商品的数量，数量不能小于1\n    const decreaseQuantity = (productId) => {\n        const copy = cart.slice() // 创建购物车的副本\n        const productIdx = copy.findIndex((item) => item.product.id === productId) // 查找该商品在购物车中的索引\n        if (productIdx !== -1 && copy[productIdx].quantity > 1) {\n            copy[productIdx].quantity -= 1 // 减少商品数量，但不能低于1\n            setCart(copy) // 更新购物车状态\n        }\n    }\n\n    // 返回一个 CartContext.Provider 组件，传递购物车状态和操作函数给子组件\n    return (\n        <CartContext.Provider\n            value={{ cart, cartItemCount, addToCart, removeFromCart, increaseQuantity, decreaseQuantity }} // 提供上下文中的数据和操作\n        >\n            {children} {/* 渲染所有子组件 */}\n        </CartContext.Provider>\n    )\n}\n\nexport { useCart, CartProvider } // 导出 useCart 自定义 Hook 和 CartProvider 组件"],"mappings":"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"},"metadata":{},"sourceType":"module"}