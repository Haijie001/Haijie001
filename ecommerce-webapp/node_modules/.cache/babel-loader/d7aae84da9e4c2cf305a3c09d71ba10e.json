{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u6591\\u9A6C\\\\\\u524D\\u7AEFts\\\\\\u7535\\u5546\\u7F51\\u7AD9\\\\ecommerce-webapp\\\\src\\\\pages\\\\products\\\\products.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\"; // 从 React 导入 useEffect 和 useState 钩子，用于管理组件状态和副作用\n\nimport { FakeStoreApi } from '../../services/fake-store-api'; // 导入 FakeStoreApi，用于获取产品数据\n\nimport { useSearchParams } from \"react-router-dom\"; // 导入 useSearchParams，用于解析 URL 中的查询参数\n\nimport { Item } from \"../../components/item\"; // 导入自定义的 Item 组件，用于展示单个产品\n\nimport { useCart } from \"../../context/cart\"; // 导入购物车上下文中的 useCart，用于将产品添加到购物车\n// Products 组件用于显示产品列表，并支持通过查询参数进行搜索\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Products = () => {\n  _s();\n\n  const [loading, setLoading] = useState(true); // 定义 loading 状态，表示产品数据是否正在加载\n\n  const [products, setProducts] = useState([]); // 定义 products 状态，用于存储获取到的产品列表\n\n  const [query] = useSearchParams(); // 获取 URL 中的查询参数对象\n\n  const {\n    addToCart\n  } = useCart(); // 从购物车上下文中解构出 addToCart 方法，用于将产品添加到购物车\n\n  const searchQuery = query.get('q'); // 获取查询参数中的搜索关键字 'q'\n  // 使用 useEffect 钩子在组件加载时或 searchQuery 变化时获取产品数据\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setLoading(true); // 设置加载状态为 true\n      // 根据是否存在搜索查询参数来选择调用不同的 API 方法\n\n      const products = searchQuery ? await FakeStoreApi.fetchProductsBySearchQuery(searchQuery) : await FakeStoreApi.fetchAllProducts();\n      setProducts(products); // 将获取到的产品数据存储到 products 状态中\n\n      setLoading(false); // 加载完成后将 loading 状态设置为 false\n    }; // 调用 fetchProducts 并处理错误\n\n\n    fetchProducts().catch(console.error);\n  }, [searchQuery]); // 当 searchQuery 变化时重新执行 useEffect\n  // 如果产品加载完成但没有匹配的产品，显示“未找到产品”的消息\n\n  if (!loading && searchQuery && !products.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"product py-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"details p-3\",\n          children: \"No products found matching your query.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  } // 返回产品列表页面的 JSX 结构\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"products my-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid\",\n          children: loading ?\n          /*#__PURE__*/\n          // 如果产品正在加载，显示加载指示器\n          _jsxDEV(\"div\", {\n            className: \"loader\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this) : // 如果产品加载完成，遍历产品列表并渲染每个产品项\n          products.map(product => /*#__PURE__*/_jsxDEV(Item, {\n            data: product,\n            addToCart: () => addToCart(product)\n          }, product.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 33\n          }, this) // 使用 Item 组件渲染每个产品项，并提供添加到购物车的功能\n          )\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Products, \"j0ogOe5X7gDX9pn41Ztn9vKiXlY=\", false, function () {\n  return [useSearchParams, useCart];\n});\n\n_c = Products;\nexport { Products }; // 导出 Products 组件\n\nvar _c;\n\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"names":["useEffect","useState","FakeStoreApi","useSearchParams","Item","useCart","Products","loading","setLoading","products","setProducts","query","addToCart","searchQuery","get","fetchProducts","fetchProductsBySearchQuery","fetchAllProducts","catch","console","error","length","map","product","id"],"sources":["D:/斑马/前端ts/电商网站/ecommerce-webapp/src/pages/products/products.js"],"sourcesContent":["import { useEffect, useState } from \"react\" // 从 React 导入 useEffect 和 useState 钩子，用于管理组件状态和副作用\nimport { FakeStoreApi } from '../../services/fake-store-api' // 导入 FakeStoreApi，用于获取产品数据\nimport { useSearchParams } from \"react-router-dom\" // 导入 useSearchParams，用于解析 URL 中的查询参数\nimport { Item } from \"../../components/item\" // 导入自定义的 Item 组件，用于展示单个产品\nimport { useCart } from \"../../context/cart\" // 导入购物车上下文中的 useCart，用于将产品添加到购物车\n\n// Products 组件用于显示产品列表，并支持通过查询参数进行搜索\nconst Products = () => {\n    const [loading, setLoading] = useState(true); // 定义 loading 状态，表示产品数据是否正在加载\n    const [products, setProducts] = useState([]); // 定义 products 状态，用于存储获取到的产品列表\n    const [query] = useSearchParams(); // 获取 URL 中的查询参数对象\n    const { addToCart } = useCart(); // 从购物车上下文中解构出 addToCart 方法，用于将产品添加到购物车\n\n    const searchQuery = query.get('q'); // 获取查询参数中的搜索关键字 'q'\n\n    // 使用 useEffect 钩子在组件加载时或 searchQuery 变化时获取产品数据\n    useEffect(() => {\n        const fetchProducts = async () => {\n            setLoading(true); // 设置加载状态为 true\n            // 根据是否存在搜索查询参数来选择调用不同的 API 方法\n            const products = searchQuery ? await FakeStoreApi.fetchProductsBySearchQuery(searchQuery) : await FakeStoreApi.fetchAllProducts();\n            setProducts(products); // 将获取到的产品数据存储到 products 状态中\n            setLoading(false); // 加载完成后将 loading 状态设置为 false\n        }\n        // 调用 fetchProducts 并处理错误\n        fetchProducts().catch(console.error)\n    }, [searchQuery]); // 当 searchQuery 变化时重新执行 useEffect\n\n    // 如果产品加载完成但没有匹配的产品，显示“未找到产品”的消息\n    if (!loading && searchQuery && !products.length) {\n        return (\n            <div className=\"container\">\n                <div className=\"product py-2\">\n                    <div className=\"details p-3\">No products found matching your query.</div> {/* 显示未找到产品的提示 */}\n                </div>\n            </div>\n        )\n    }\n\n    // 返回产品列表页面的 JSX 结构\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"products my-5\">\n                    <div className=\"grid\">\n                        {loading ? (\n                            // 如果产品正在加载，显示加载指示器\n                            <div className=\"loader\" />\n                        ) : (\n                            // 如果产品加载完成，遍历产品列表并渲染每个产品项\n                            products.map((product) => (\n                                <Item key={product.id} data={product} addToCart={() => addToCart(product)} /> // 使用 Item 组件渲染每个产品项，并提供添加到购物车的功能\n                            ))\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport { Products } // 导出 Products 组件"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAA4C;;AAC5C,SAASC,YAAT,QAA6B,+BAA7B,C,CAA6D;;AAC7D,SAASC,eAAT,QAAgC,kBAAhC,C,CAAmD;;AACnD,SAASC,IAAT,QAAqB,uBAArB,C,CAA6C;;AAC7C,SAASC,OAAT,QAAwB,oBAAxB,C,CAA6C;AAE7C;;;;;AACA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACnB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC,CADmB,CAC2B;;EAC9C,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC,CAFmB,CAE2B;;EAC9C,MAAM,CAACU,KAAD,IAAUR,eAAe,EAA/B,CAHmB,CAGgB;;EACnC,MAAM;IAAES;EAAF,IAAgBP,OAAO,EAA7B,CAJmB,CAIc;;EAEjC,MAAMQ,WAAW,GAAGF,KAAK,CAACG,GAAN,CAAU,GAAV,CAApB,CANmB,CAMiB;EAEpC;;EACAd,SAAS,CAAC,MAAM;IACZ,MAAMe,aAAa,GAAG,YAAY;MAC9BP,UAAU,CAAC,IAAD,CAAV,CAD8B,CACZ;MAClB;;MACA,MAAMC,QAAQ,GAAGI,WAAW,GAAG,MAAMX,YAAY,CAACc,0BAAb,CAAwCH,WAAxC,CAAT,GAAgE,MAAMX,YAAY,CAACe,gBAAb,EAAlG;MACAP,WAAW,CAACD,QAAD,CAAX,CAJ8B,CAIP;;MACvBD,UAAU,CAAC,KAAD,CAAV,CAL8B,CAKX;IACtB,CAND,CADY,CAQZ;;;IACAO,aAAa,GAAGG,KAAhB,CAAsBC,OAAO,CAACC,KAA9B;EACH,CAVQ,EAUN,CAACP,WAAD,CAVM,CAAT,CATmB,CAmBA;EAEnB;;EACA,IAAI,CAACN,OAAD,IAAYM,WAAZ,IAA2B,CAACJ,QAAQ,CAACY,MAAzC,EAAiD;IAC7C,oBACI;MAAK,SAAS,EAAC,WAAf;MAAA,uBACI;QAAK,SAAS,EAAC,cAAf;QAAA,wBACI;UAAK,SAAS,EAAC,aAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAOH,CA9BkB,CAgCnB;;;EACA,oBACI;IAAA,uBACI;MAAK,SAAS,EAAC,WAAf;MAAA,uBACI;QAAK,SAAS,EAAC,eAAf;QAAA,uBACI;UAAK,SAAS,EAAC,MAAf;UAAA,UACKd,OAAO;UAAA;UACJ;UACA;YAAK,SAAS,EAAC;UAAf;YAAA;YAAA;YAAA;UAAA,QAFI,GAIJ;UACAE,QAAQ,CAACa,GAAT,CAAcC,OAAD,iBACT,QAAC,IAAD;YAAuB,IAAI,EAAEA,OAA7B;YAAsC,SAAS,EAAE,MAAMX,SAAS,CAACW,OAAD;UAAhE,GAAWA,OAAO,CAACC,EAAnB;YAAA;YAAA;YAAA;UAAA,QADS,CACqE;UADlF;QANR;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EADJ,iBADJ;AAmBH,CApDD;;GAAMlB,Q;UAGcH,e,EACME,O;;;KAJpBC,Q;AAsDN,SAASA,QAAT,G,CAAoB"},"metadata":{},"sourceType":"module"}